name: Lint and test

on:
  workflow_dispatch:
  push:
  pull_request:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
        matrix:
          python-version: ["3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ matrix.python-version }}-${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ matrix.python-version }}-${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src --count --max-complexity=10 --max-line-length=127 --statistics
  
  test:
    runs-on: ubuntu-latest
    strategy:
        matrix:
          python-version: ["3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip' # caching pip dependencies

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ matrix.python-version }}-${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ matrix.python-version }}-${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test with pytest
      run: |
        pytest

  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'release' }}
    needs: [lint, test]
    
    steps:
        - uses: actions/checkout@v4
        
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.11'
            cache: 'pip'
            
        - name: Cache pip
          uses: actions/cache@v4
          with:
            path: ~/.cache/pip
            key: 3.11-${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
            restore-keys: |
              3.11-${{ runner.os }}-pip-
        
        - name: Install build dependencies
          run: |
            python -m pip install --upgrade pip
            pip install build
        
        - name: Build package
          run: python -m build
            
        - name: Publish package to PyPI
          uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
          with:
            user: __token__
            password: ${{ secrets.PYPI_API_TOKEN }}
